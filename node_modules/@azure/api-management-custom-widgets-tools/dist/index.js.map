{"version":3,"file":"index.js","sources":["../src/utils.ts","../src/paths.ts","../src/node/CustomWidgetBlobService.ts","../src/node/getStorageSasUrl.ts","../src/node/readdir.ts","../src/node/deploy.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Key for a search param, from which editor data will be loaded from.\n */\nexport const APIM_EDITOR_DATA_KEY = \"editorData\";\n/**\n * Key for a post message object, it's used to propagate changes from editor to the DevPortal. Used to prevent interference with other applications.\n */\nexport const APIM_ON_CHANGE_MESSAGE_KEY = \"customInputValueChangedMSAPIM\";\n/**\n * Key for a post message object, it's used to request and send secrets - token and user id, from the DevPortal. Used to prevent interference with other applications.\n */\nexport const APIM_ASK_FOR_SECRETS_MESSAGE_KEY = \"askForSecretsMSAPIM\";\n\n/**\n * Base of a values obj\n */\nexport type ValuesCommon = Record<string, unknown>;\n/**\n * All possible runtime environments\n */\nexport type Environment = \"development\" | \"publishing\" | \"runtime\" | \"error\";\n\n/** Information about the widget instance received from the Dev Portal */\nexport interface PortalData {\n  // /** web content's origin (URL) of your Dev Portal */\n  // origin: string;\n  /** current runtime environment */\n  environment: Environment;\n  /** ID of this particular instance of the widget */\n  instanceId: string;\n}\n\n/** JSON object with all the data you'll receive from the Dev Portal */\nexport interface EditorData<Values extends ValuesCommon> extends PortalData {\n  /** values you've set in the admin editor window */\n  values: Partial<Values>;\n}\n\nfunction parseWidgetData<Values extends ValuesCommon>(\n  urlSearchParams: URLSearchParams\n): EditorData<Values> {\n  try {\n    const urlEditorParams: EditorData<Values> = JSON.parse(\n      decodeURIComponent(urlSearchParams.get(APIM_EDITOR_DATA_KEY) ?? \"\")\n    );\n\n    // if (!(\"origin\" in urlEditorParams)) {\n    //   console.error(\n    //     \"Could not get 'origin' from the search params of the URL:\\n\" + self.location.href\n    //   );\n    // }\n    return urlEditorParams;\n  } catch (e) {\n    console.error(\n      `Could not get '${APIM_EDITOR_DATA_KEY}' from the search params of the URL:\\n` +\n        self.location,\n      e\n    );\n    return { values: {}, environment: \"error\", instanceId: \"error\" };\n  }\n}\n\nexport function getWidgetDataPure<Values extends ValuesCommon>(\n  urlSearchParams: URLSearchParams\n): EditorData<Values> {\n  return parseWidgetData<Values>(urlSearchParams);\n}\n\n/**\n * Function to get all data related to the widget including technical values not expected to be needed in most cases.\n * Intended mostly for internal use, API might change. Consider using getValues or getEditorValues instead.\n */\nexport function getWidgetData<Values extends ValuesCommon>(): EditorData<Values> {\n  return getWidgetDataPure(new URLSearchParams(self.location.search));\n}\n\nexport function getEditorValuesPure<Values extends ValuesCommon>(\n  urlSearchParams: URLSearchParams\n): Partial<Values> {\n  return getWidgetDataPure<Values>(urlSearchParams).values;\n}\n\n/**\n * Function to get values you've set in the admin editor window.\n */\nexport function getEditorValues<Values extends ValuesCommon>(): Partial<Values> {\n  return getEditorValuesPure<Values>(new URLSearchParams(self.location.search));\n}\n\nexport function getValuesPure<Values extends ValuesCommon>(\n  valuesDefault: Values,\n  urlSearchParams: URLSearchParams\n): Values {\n  const values = { ...valuesDefault }; // set Obj to contain all possible values and prefill default value\n  const urlValues = parseWidgetData<Values>(urlSearchParams).values;\n\n  Object.keys(values).forEach((key: keyof Values) => {\n    const value = urlValues[key];\n    if (value != null && value !== \"\") values[key] = value as Values[typeof key]; // if value is specified in the URL, replace the default value\n  });\n  return values;\n}\n\n/**\n * Function to get values you've set in the admin editor window. Undefined/empty values are replaced with default values.\n *\n * @param valuesDefault - object with your default values to use, just import valuesDefault object from values.ts folder\n */\nexport function getValues<Values extends ValuesCommon>(valuesDefault: Values): Values {\n  return getValuesPure(valuesDefault, new URLSearchParams(self.location.search));\n}\n\n/**\n * Type of the onChange function.\n */\nexport type OnChange<Values extends ValuesCommon> = (values: Partial<Values>) => void;\n\n/**\n * The onChange function itself with 'origin' provided as a param.\n *\n * @param origin - web content's origin (URL) of your Dev Portal to send changes to\n * @param instanceId - ID of this particular instance of the widget\n * @param values - values that changed\n */\nexport function onChangeWithOrigin<Values extends ValuesCommon>(\n  origin: string,\n  instanceId: string,\n  values: Values\n): void {\n  Object.entries(values).forEach(([key, value]) => {\n    self.parent.postMessage({ [APIM_ON_CHANGE_MESSAGE_KEY]: { key, value, instanceId } }, origin);\n  });\n}\n\n/**\n * Build onChange function, which you can use, to send changed data from the editor.\n */\nexport function buildOnChange<Values extends ValuesCommon>(): OnChange<Values> {\n  const { instanceId } = getWidgetData();\n  return (values: Partial<Values>) => onChangeWithOrigin(\"*\", instanceId, values);\n}\n\n/**\n * Possible target modules\n * \"app\" for main application which is embedded in your Dev Portal\n * \"editor\" for form in admin panel\n */\nexport type TargetModule = \"app\" | \"editor\";\n/**\n * Secrets needed for communication with Dev Portal back-end\n */\nexport type Secrets = {\n  managementApiUrl: string;\n  apiVersion: string;\n  userId?: string;\n  token?: string;\n};\n\n/**\n * Request secrets - token & userId, from the Dev portal parent window.\n *\n * @param targetModule - is the function invoke from the main \"app\" window or the admin \"editor\"?\n */\nexport async function askForSecrets(targetModule: TargetModule): Promise<Secrets> {\n  let receiveSecrets: (e: MessageEvent) => void;\n\n  const promise = new Promise<Secrets>((resolve, reject) => {\n    const { instanceId, environment }: PortalData = getWidgetData();\n\n    receiveSecrets = ({ data }) => {\n      if (!(APIM_ASK_FOR_SECRETS_MESSAGE_KEY in data)) return;\n\n      const secrets = data[APIM_ASK_FOR_SECRETS_MESSAGE_KEY];\n      if (typeof secrets !== \"object\" || !(\"managementApiUrl\" in secrets)) {\n        reject(\"Secrets send by Dev Portal are invalid\");\n      }\n\n      resolve(secrets);\n    };\n\n    self.addEventListener(\"message\", receiveSecrets);\n\n    const message = {\n      [APIM_ASK_FOR_SECRETS_MESSAGE_KEY]: {\n        instanceId,\n        origin: self.location.origin,\n        targetModule,\n      },\n    };\n\n    if (targetModule === \"app\" && environment === \"development\") {\n      self.parent.parent.postMessage(message, \"*\");\n    } else {\n      self.parent.postMessage(message, \"*\");\n    }\n  });\n\n  return promise.finally(() => self.removeEventListener(\"message\", receiveSecrets));\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/** root of the blob storage folder */\nexport const BLOB_ROOT = \"custom-widgets\";\n/** name of the blob storage folder with widget implementation */\nexport const BLOB_DATA_FOLDER = \"data\";\n/** name of the blob storage folder with widget configs */\nexport const BLOB_CONFIGS_FOLDER = \"configs\";\n/** name of the configuration file */\nexport const APIM_CONFIG_FILE_NAME = \"config.msapim.json\";\n\n/**\n * Generate relative path for widgets' data on the blob storage\n *\n * @param name - name of the widget\n */\nexport function buildBlobDataPath(name: string): string {\n  return `${BLOB_ROOT}/${BLOB_DATA_FOLDER}/${name}/`;\n}\n\n/**\n * Generate relative path for widgets' config on the blob storage\n *\n * @param name - name of the widget\n */\nexport function buildBlobConfigPath(name: string): string {\n  return `${BLOB_ROOT}/${BLOB_CONFIGS_FOLDER}/${name}/${APIM_CONFIG_FILE_NAME}`;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { BlobServiceClient, BlockBlobUploadResponse } from \"@azure/storage-blob\";\nimport { buildBlobConfigPath, buildBlobDataPath } from \"../paths\";\nimport mime from \"mime\";\n\nexport type Config = Record<string, unknown>;\n\n/**\n * A service wrapping ContainerClient class to simplify blob handling\n */\nexport class CustomWidgetBlobService {\n  readonly containerClient;\n  readonly name;\n  readonly pathWidget;\n  readonly pathConfig;\n\n  /**\n   * @param blobStorageUrl - blob storage SAS URL\n   * @param name - name of the custom widget to be taken care of\n   */\n  constructor(blobStorageUrl: string, name: string) {\n    const container = \"content\";\n    const blobServiceClient = new BlobServiceClient(blobStorageUrl.replace(`/${container}`, \"\"));\n    this.containerClient = blobServiceClient.getContainerClient(container);\n    this.name = name;\n    this.pathWidget = buildBlobDataPath(name);\n    this.pathConfig = buildBlobConfigPath(name);\n  }\n\n  private extractFileName(path: string): string | undefined {\n    return path.split(\"/\").pop();\n  }\n\n  async blobUpload(absolutePath: string, content: Buffer): Promise<BlockBlobUploadResponse> {\n    const fileName = this.extractFileName(absolutePath);\n    if (!fileName) throw new Error(\"a fileName was not found in the absolutePath\");\n    return this.containerClient.getBlockBlobClient(absolutePath).upload(content, content.length, {\n      blobHTTPHeaders: { blobContentType: mime.getType(fileName) || \"application/octet-stream\" },\n    });\n  }\n\n  async jsonUpload(\n    absolutePath: string,\n    json: Record<string, unknown>\n  ): Promise<BlockBlobUploadResponse> {\n    return this.blobUpload(absolutePath, Buffer.from(JSON.stringify(json)));\n  }\n\n  async blobDownload(absolutePath: string): Promise<Buffer> {\n    return this.containerClient.getBlockBlobClient(absolutePath).downloadToBuffer();\n  }\n\n  async dirDelete(absolutePath: string): Promise<void> {\n    for await (const blob of await this.containerClient.listBlobsFlat({ prefix: absolutePath })) {\n      await this.containerClient.deleteBlob(blob.name);\n    }\n  }\n\n  async uploadWidgetDataFile(file: string, content: Buffer): Promise<BlockBlobUploadResponse> {\n    return this.blobUpload(this.pathWidget + file, content);\n  }\n\n  async cleanDataDir(): Promise<void> {\n    return this.dirDelete(this.pathWidget);\n  }\n\n  async getConfig(): Promise<Config> {\n    const buffer = await this.blobDownload(this.pathConfig);\n    return JSON.parse(buffer.toString());\n  }\n\n  async uploadConfig(config: Config): Promise<BlockBlobUploadResponse> {\n    return this.jsonUpload(this.pathConfig, config);\n  }\n}\n\nexport default CustomWidgetBlobService;\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { InteractiveBrowserCredential } from \"@azure/identity\";\nimport { ServiceInformation } from \"./deploy\";\nimport { getClient } from \"@azure-rest/core-client\";\n\nasync function getAccessToken(managementApiEndpoint: string): Promise<string> {\n  const credentials = new InteractiveBrowserCredential();\n  const scope = `${managementApiEndpoint}/user_impersonation`;\n  const { token } = await credentials.getToken(scope);\n  return `Bearer ${token}`;\n}\n\n/**\n * Function to get storage SAS URL.\n *\n * @returns storage SAS URL\n */\nasync function getStorageSasUrl({\n  managementApiEndpoint,\n  resourceId,\n  apiVersion = \"2019-01-01\",\n  tokenOverride,\n}: ServiceInformation): Promise<string> {\n  const httpClient = getClient(`${managementApiEndpoint}/${resourceId}`, { apiVersion });\n  const response = await httpClient\n    .pathUnchecked(`/portalSettings/mediaContent/listSecrets?apiVersion=${apiVersion}`) // TODO\n    .post({\n      headers: {\n        \"If-Match\": \"*\",\n        \"Content-Type\": \"application/json\",\n        Authorization: tokenOverride ?? (await getAccessToken(managementApiEndpoint)),\n      },\n    });\n\n  if (!response?.body?.containerSasUrl) throw new Error(\"Could not get storage SAS URL\");\n  return response.body.containerSasUrl;\n}\n\nexport default getStorageSasUrl;\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport fs from \"fs\";\nimport path from \"path\";\n\nfunction readdir(dir: string, root: string): string[] {\n  const results: string[] = [];\n\n  fs.readdirSync(root + dir).forEach((file) => {\n    const stat = fs.statSync(root + dir + path.sep + file);\n    if (stat && stat.isDirectory()) {\n      results.push(...readdir(dir + file + path.sep, root));\n    } else {\n      results.push(dir + file);\n    }\n  });\n\n  return results;\n}\n\nexport default readdir;\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport CustomWidgetBlobService, { Config } from \"./CustomWidgetBlobService\";\nimport { APIM_CONFIG_FILE_NAME } from \"../paths\";\nimport fs from \"fs\";\nimport getStorageSasUrl from \"./getStorageSasUrl\";\nimport readdir from \"./readdir\";\n\n/**\n * resourceId - resource ID of API Management service \"subscriptions/[subscription-id]/resourceGroups/[resource-group-name]/providers/Microsoft.ApiManagement/service/[service-name]\"\n * managementApiEndpoint - URL with protocol (e.g. https://management.azure.com)\n * apiVersion - optional to override default (e.g. \"2019-01-01\")\n * tokenOverride - optional, provides token to use for auth, instead of 'az login' approach\n */\nexport type ServiceInformation = {\n  resourceId: string;\n  managementApiEndpoint: string;\n  apiVersion?: string;\n  tokenOverride?: string;\n};\n\n/**\n * Deploys everything from /dist folder to the API Management DevPortals' blob storage.\n *\n * @param serviceInformation - service information for deployment\n * @param name - name of the widget to be deployed\n * @param fallbackConfigPath - local path to the config file (by default \"./static/config.msapim.json\")\n * @param rootLocal - optional, root of the local folder with compiled project to be exported (by default \"./dist\")\n */\nasync function deploy(\n  serviceInformation: ServiceInformation,\n  name: string,\n  fallbackConfigPath = \"./static/\" + APIM_CONFIG_FILE_NAME,\n  rootLocal: string = \"./dist/\"\n): Promise<void> {\n  console.log(\"\\n\\n\");\n  console.log(\"Starting deploy process of custom widget: \" + name);\n  console.log(\"Please, sign in to your Azure account when prompted\\n\");\n\n  const blobStorageUrl = await getStorageSasUrl(serviceInformation);\n  const customWidgetBlobService = new CustomWidgetBlobService(blobStorageUrl, name);\n\n  let config: Config | undefined;\n  try {\n    console.log(\"Looking for config file in the Azure blob storage\");\n    config = await customWidgetBlobService.getConfig();\n  } catch (e) {\n    console.log(\"Config not found.\");\n  }\n  if (!config) {\n    console.log(\"Looking for a local config file in: \" + fallbackConfigPath);\n    config = JSON.parse(fs.readFileSync(fallbackConfigPath).toString());\n  }\n  if (!config) {\n    throw new Error(\"Config file could not be loaded.\");\n  }\n\n  console.log(\"Config file loaded\\n\");\n\n  const files = readdir(\"\", rootLocal);\n\n  console.log(\"Starting upload of data files from the '\" + rootLocal + \"' folder\\n\");\n\n  await customWidgetBlobService.cleanDataDir();\n\n  const promises: Promise<void>[] = [];\n  files.forEach((file) => {\n    const content = fs.readFileSync(rootLocal + file);\n    const promise = customWidgetBlobService\n      .uploadWidgetDataFile(file, content)\n      .then(() => console.log(\"Uploaded file: \" + file));\n    promises.push(promise);\n  });\n  await Promise.all(promises);\n\n  console.log(files.length + \" files has been uploaded\\n\");\n\n  config.deployedOn = new Date();\n  await customWidgetBlobService.uploadConfig(config);\n  console.log(\"Uploaded updated config\");\n}\n\nexport default deploy;\n"],"names":["BlobServiceClient","mime","__asyncValues","InteractiveBrowserCredential","getClient","fs","path","CustomWidgetBlobService"],"mappings":"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"}