{"version":3,"file":"CustomWidgetBlobService.js","sourceRoot":"","sources":["../../../src/node/CustomWidgetBlobService.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { BlobServiceClient, BlockBlobUploadResponse } from \"@azure/storage-blob\";\nimport { buildBlobConfigPath, buildBlobDataPath } from \"../paths\";\nimport mime from \"mime\";\n\nexport type Config = Record<string, unknown>;\n\n/**\n * A service wrapping ContainerClient class to simplify blob handling\n */\nexport class CustomWidgetBlobService {\n  readonly containerClient;\n  readonly name;\n  readonly pathWidget;\n  readonly pathConfig;\n\n  /**\n   * @param blobStorageUrl - blob storage SAS URL\n   * @param name - name of the custom widget to be taken care of\n   */\n  constructor(blobStorageUrl: string, name: string) {\n    const container = \"content\";\n    const blobServiceClient = new BlobServiceClient(blobStorageUrl.replace(`/${container}`, \"\"));\n    this.containerClient = blobServiceClient.getContainerClient(container);\n    this.name = name;\n    this.pathWidget = buildBlobDataPath(name);\n    this.pathConfig = buildBlobConfigPath(name);\n  }\n\n  private extractFileName(path: string): string | undefined {\n    return path.split(\"/\").pop();\n  }\n\n  async blobUpload(absolutePath: string, content: Buffer): Promise<BlockBlobUploadResponse> {\n    const fileName = this.extractFileName(absolutePath);\n    if (!fileName) throw new Error(\"a fileName was not found in the absolutePath\");\n    return this.containerClient.getBlockBlobClient(absolutePath).upload(content, content.length, {\n      blobHTTPHeaders: { blobContentType: mime.getType(fileName) || \"application/octet-stream\" },\n    });\n  }\n\n  async jsonUpload(\n    absolutePath: string,\n    json: Record<string, unknown>\n  ): Promise<BlockBlobUploadResponse> {\n    return this.blobUpload(absolutePath, Buffer.from(JSON.stringify(json)));\n  }\n\n  async blobDownload(absolutePath: string): Promise<Buffer> {\n    return this.containerClient.getBlockBlobClient(absolutePath).downloadToBuffer();\n  }\n\n  async dirDelete(absolutePath: string): Promise<void> {\n    for await (const blob of await this.containerClient.listBlobsFlat({ prefix: absolutePath })) {\n      await this.containerClient.deleteBlob(blob.name);\n    }\n  }\n\n  async uploadWidgetDataFile(file: string, content: Buffer): Promise<BlockBlobUploadResponse> {\n    return this.blobUpload(this.pathWidget + file, content);\n  }\n\n  async cleanDataDir(): Promise<void> {\n    return this.dirDelete(this.pathWidget);\n  }\n\n  async getConfig(): Promise<Config> {\n    const buffer = await this.blobDownload(this.pathConfig);\n    return JSON.parse(buffer.toString());\n  }\n\n  async uploadConfig(config: Config): Promise<BlockBlobUploadResponse> {\n    return this.jsonUpload(this.pathConfig, config);\n  }\n}\n\nexport default CustomWidgetBlobService;\n"]}