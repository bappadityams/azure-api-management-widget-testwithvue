// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { InteractiveBrowserCredential } from "@azure/identity";
import { getClient } from "@azure-rest/core-client";
async function getAccessToken(managementApiEndpoint) {
    const credentials = new InteractiveBrowserCredential();
    const scope = `${managementApiEndpoint}/user_impersonation`;
    const { token } = await credentials.getToken(scope);
    return `Bearer ${token}`;
}
/**
 * Function to get storage SAS URL.
 *
 * @returns storage SAS URL
 */
async function getStorageSasUrl({ managementApiEndpoint, resourceId, apiVersion = "2019-01-01", tokenOverride, }) {
    var _a;
    const httpClient = getClient(`${managementApiEndpoint}/${resourceId}`, { apiVersion });
    const response = await httpClient
        .pathUnchecked(`/portalSettings/mediaContent/listSecrets?apiVersion=${apiVersion}`) // TODO
        .post({
        headers: {
            "If-Match": "*",
            "Content-Type": "application/json",
            Authorization: tokenOverride !== null && tokenOverride !== void 0 ? tokenOverride : (await getAccessToken(managementApiEndpoint)),
        },
    });
    if (!((_a = response === null || response === void 0 ? void 0 : response.body) === null || _a === void 0 ? void 0 : _a.containerSasUrl))
        throw new Error("Could not get storage SAS URL");
    return response.body.containerSasUrl;
}
export default getStorageSasUrl;
//# sourceMappingURL=getStorageSasUrl.js.map