// node_modules/@azure/api-management-custom-widgets-tools/dist-esm/src/utils.js
var APIM_EDITOR_DATA_KEY = "editorData";
var APIM_ON_CHANGE_MESSAGE_KEY = "customInputValueChangedMSAPIM";
var APIM_ASK_FOR_SECRETS_MESSAGE_KEY = "askForSecretsMSAPIM";
function parseWidgetData(urlSearchParams) {
  var _a;
  try {
    const urlEditorParams = JSON.parse(decodeURIComponent((_a = urlSearchParams.get(APIM_EDITOR_DATA_KEY)) !== null && _a !== void 0 ? _a : ""));
    return urlEditorParams;
  } catch (e) {
    console.error(`Could not get '${APIM_EDITOR_DATA_KEY}' from the search params of the URL:
` + self.location, e);
    return { values: {}, environment: "error", instanceId: "error" };
  }
}
function getWidgetDataPure(urlSearchParams) {
  return parseWidgetData(urlSearchParams);
}
function getWidgetData() {
  return getWidgetDataPure(new URLSearchParams(self.location.search));
}
function getEditorValuesPure(urlSearchParams) {
  return getWidgetDataPure(urlSearchParams).values;
}
function getEditorValues() {
  return getEditorValuesPure(new URLSearchParams(self.location.search));
}
function getValuesPure(valuesDefault, urlSearchParams) {
  const values = Object.assign({}, valuesDefault);
  const urlValues = parseWidgetData(urlSearchParams).values;
  Object.keys(values).forEach((key) => {
    const value = urlValues[key];
    if (value != null && value !== "")
      values[key] = value;
  });
  return values;
}
function getValues(valuesDefault) {
  return getValuesPure(valuesDefault, new URLSearchParams(self.location.search));
}
function onChangeWithOrigin(origin, instanceId, values) {
  Object.entries(values).forEach(([key, value]) => {
    self.parent.postMessage({ [APIM_ON_CHANGE_MESSAGE_KEY]: { key, value, instanceId } }, origin);
  });
}
function buildOnChange() {
  const { instanceId } = getWidgetData();
  return (values) => onChangeWithOrigin("*", instanceId, values);
}
async function askForSecrets(targetModule) {
  let receiveSecrets;
  const promise = new Promise((resolve, reject) => {
    const { instanceId, environment } = getWidgetData();
    receiveSecrets = ({ data }) => {
      if (!(APIM_ASK_FOR_SECRETS_MESSAGE_KEY in data))
        return;
      const secrets = data[APIM_ASK_FOR_SECRETS_MESSAGE_KEY];
      if (typeof secrets !== "object" || !("managementApiUrl" in secrets)) {
        reject("Secrets send by Dev Portal are invalid");
      }
      resolve(secrets);
    };
    self.addEventListener("message", receiveSecrets);
    const message = {
      [APIM_ASK_FOR_SECRETS_MESSAGE_KEY]: {
        instanceId,
        origin: self.location.origin,
        targetModule
      }
    };
    if (targetModule === "app" && environment === "development") {
      self.parent.parent.postMessage(message, "*");
    } else {
      self.parent.postMessage(message, "*");
    }
  });
  return promise.finally(() => self.removeEventListener("message", receiveSecrets));
}

// node_modules/@azure/api-management-custom-widgets-tools/dist-esm/src/paths.js
var BLOB_ROOT = "custom-widgets";
var BLOB_DATA_FOLDER = "data";
var BLOB_CONFIGS_FOLDER = "configs";
var APIM_CONFIG_FILE_NAME = "config.msapim.json";
function buildBlobDataPath(name) {
  return `${BLOB_ROOT}/${BLOB_DATA_FOLDER}/${name}/`;
}
function buildBlobConfigPath(name) {
  return `${BLOB_ROOT}/${BLOB_CONFIGS_FOLDER}/${name}/${APIM_CONFIG_FILE_NAME}`;
}

// node_modules/@azure/api-management-custom-widgets-tools/dist-esm/src/node/deploy.browser.js
async function deploy(_serviceInformation, _name, _fallbackConfigPath) {
  throw new Error("Only for Node.js");
}
var deploy_browser_default = deploy;
export {
  APIM_ASK_FOR_SECRETS_MESSAGE_KEY,
  APIM_CONFIG_FILE_NAME,
  APIM_EDITOR_DATA_KEY,
  APIM_ON_CHANGE_MESSAGE_KEY,
  BLOB_CONFIGS_FOLDER,
  BLOB_DATA_FOLDER,
  BLOB_ROOT,
  askForSecrets,
  buildBlobConfigPath,
  buildBlobDataPath,
  buildOnChange,
  deploy_browser_default as deployNodeJS,
  getEditorValues,
  getValues,
  getWidgetData,
  onChangeWithOrigin
};
//# sourceMappingURL=@azure_api-management-custom-widgets-tools.js.map
