/**
 * @packageDocumentation https://aka.ms/apimdocs/portal/customwidgets
 */

/**
 * Key for a post message object, it's used to request and send secrets - token and user id, from the DevPortal. Used to prevent interference with other applications.
 */
export declare const APIM_ASK_FOR_SECRETS_MESSAGE_KEY = "askForSecretsMSAPIM";

/** name of the configuration file */
export declare const APIM_CONFIG_FILE_NAME = "config.msapim.json";

/**
 * Key for a search param, from which editor data will be loaded from.
 */
export declare const APIM_EDITOR_DATA_KEY = "editorData";

/**
 * Key for a post message object, it's used to propagate changes from editor to the DevPortal. Used to prevent interference with other applications.
 */
export declare const APIM_ON_CHANGE_MESSAGE_KEY = "customInputValueChangedMSAPIM";

/**
 * Request secrets - token & userId, from the Dev portal parent window.
 *
 * @param targetModule - is the function invoke from the main "app" window or the admin "editor"?
 */
export declare function askForSecrets(targetModule: TargetModule): Promise<Secrets>;

/** name of the blob storage folder with widget configs */
export declare const BLOB_CONFIGS_FOLDER = "configs";

/** name of the blob storage folder with widget implementation */
export declare const BLOB_DATA_FOLDER = "data";

/** root of the blob storage folder */
export declare const BLOB_ROOT = "custom-widgets";

/**
 * Generate relative path for widgets' config on the blob storage
 *
 * @param name - name of the widget
 */
export declare function buildBlobConfigPath(name: string): string;

/**
 * Generate relative path for widgets' data on the blob storage
 *
 * @param name - name of the widget
 */
export declare function buildBlobDataPath(name: string): string;

/**
 * Build onChange function, which you can use, to send changed data from the editor.
 */
export declare function buildOnChange<Values extends ValuesCommon>(): OnChange<Values>;

/**
 * Deploys everything from /dist folder to the API Management DevPortals' blob storage.
 *
 * @param serviceInformation - service information for deployment
 * @param name - name of the widget to be deployed
 * @param fallbackConfigPath - local path to the config file (by default "./static/config.msapim.json")
 * @param rootLocal - optional, root of the local folder with compiled project to be exported (by default "./dist")
 */
export declare function deployNodeJS(serviceInformation: ServiceInformation, name: string, fallbackConfigPath?: string, rootLocal?: string): Promise<void>;

/** JSON object with all the data you'll receive from the Dev Portal */
export declare interface EditorData<Values extends ValuesCommon> extends PortalData {
    /** values you've set in the admin editor window */
    values: Partial<Values>;
}

/**
 * All possible runtime environments
 */
export declare type Environment = "development" | "publishing" | "runtime" | "error";

/**
 * Function to get values you've set in the admin editor window.
 */
export declare function getEditorValues<Values extends ValuesCommon>(): Partial<Values>;

/**
 * Function to get values you've set in the admin editor window. Undefined/empty values are replaced with default values.
 *
 * @param valuesDefault - object with your default values to use, just import valuesDefault object from values.ts folder
 */
export declare function getValues<Values extends ValuesCommon>(valuesDefault: Values): Values;

/**
 * Function to get all data related to the widget including technical values not expected to be needed in most cases.
 * Intended mostly for internal use, API might change. Consider using getValues or getEditorValues instead.
 */
export declare function getWidgetData<Values extends ValuesCommon>(): EditorData<Values>;

/**
 * Type of the onChange function.
 */
export declare type OnChange<Values extends ValuesCommon> = (values: Partial<Values>) => void;

/**
 * The onChange function itself with 'origin' provided as a param.
 *
 * @param origin - web content's origin (URL) of your Dev Portal to send changes to
 * @param instanceId - ID of this particular instance of the widget
 * @param values - values that changed
 */
export declare function onChangeWithOrigin<Values extends ValuesCommon>(origin: string, instanceId: string, values: Values): void;

/** Information about the widget instance received from the Dev Portal */
export declare interface PortalData {
    /** current runtime environment */
    environment: Environment;
    /** ID of this particular instance of the widget */
    instanceId: string;
}

/**
 * Secrets needed for communication with Dev Portal back-end
 */
export declare type Secrets = {
    managementApiUrl: string;
    apiVersion: string;
    userId?: string;
    token?: string;
};

/**
 * resourceId - resource ID of API Management service "subscriptions/[subscription-id]/resourceGroups/[resource-group-name]/providers/Microsoft.ApiManagement/service/[service-name]"
 * managementApiEndpoint - URL with protocol (e.g. https://management.azure.com)
 * apiVersion - optional to override default (e.g. "2019-01-01")
 * tokenOverride - optional, provides token to use for auth, instead of 'az login' approach
 */
export declare type ServiceInformation = {
    resourceId: string;
    managementApiEndpoint: string;
    apiVersion?: string;
    tokenOverride?: string;
};

/**
 * Possible target modules
 * "app" for main application which is embedded in your Dev Portal
 * "editor" for form in admin panel
 */
export declare type TargetModule = "app" | "editor";

/**
 * Base of a values obj
 */
export declare type ValuesCommon = Record<string, unknown>;

export { }
