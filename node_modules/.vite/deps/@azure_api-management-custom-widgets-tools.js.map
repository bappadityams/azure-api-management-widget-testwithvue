{
  "version": 3,
  "sources": ["../../@azure/api-management-custom-widgets-tools/src/utils.ts", "../../@azure/api-management-custom-widgets-tools/src/paths.ts", "../../@azure/api-management-custom-widgets-tools/src/node/deploy.browser.ts"],
  "sourcesContent": ["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Key for a search param, from which editor data will be loaded from.\n */\nexport const APIM_EDITOR_DATA_KEY = \"editorData\";\n/**\n * Key for a post message object, it's used to propagate changes from editor to the DevPortal. Used to prevent interference with other applications.\n */\nexport const APIM_ON_CHANGE_MESSAGE_KEY = \"customInputValueChangedMSAPIM\";\n/**\n * Key for a post message object, it's used to request and send secrets - token and user id, from the DevPortal. Used to prevent interference with other applications.\n */\nexport const APIM_ASK_FOR_SECRETS_MESSAGE_KEY = \"askForSecretsMSAPIM\";\n\n/**\n * Base of a values obj\n */\nexport type ValuesCommon = Record<string, unknown>;\n/**\n * All possible runtime environments\n */\nexport type Environment = \"development\" | \"publishing\" | \"runtime\" | \"error\";\n\n/** Information about the widget instance received from the Dev Portal */\nexport interface PortalData {\n  // /** web content's origin (URL) of your Dev Portal */\n  // origin: string;\n  /** current runtime environment */\n  environment: Environment;\n  /** ID of this particular instance of the widget */\n  instanceId: string;\n}\n\n/** JSON object with all the data you'll receive from the Dev Portal */\nexport interface EditorData<Values extends ValuesCommon> extends PortalData {\n  /** values you've set in the admin editor window */\n  values: Partial<Values>;\n}\n\nfunction parseWidgetData<Values extends ValuesCommon>(\n  urlSearchParams: URLSearchParams\n): EditorData<Values> {\n  try {\n    const urlEditorParams: EditorData<Values> = JSON.parse(\n      decodeURIComponent(urlSearchParams.get(APIM_EDITOR_DATA_KEY) ?? \"\")\n    );\n\n    // if (!(\"origin\" in urlEditorParams)) {\n    //   console.error(\n    //     \"Could not get 'origin' from the search params of the URL:\\n\" + self.location.href\n    //   );\n    // }\n    return urlEditorParams;\n  } catch (e) {\n    console.error(\n      `Could not get '${APIM_EDITOR_DATA_KEY}' from the search params of the URL:\\n` +\n        self.location,\n      e\n    );\n    return { values: {}, environment: \"error\", instanceId: \"error\" };\n  }\n}\n\nexport function getWidgetDataPure<Values extends ValuesCommon>(\n  urlSearchParams: URLSearchParams\n): EditorData<Values> {\n  return parseWidgetData<Values>(urlSearchParams);\n}\n\n/**\n * Function to get all data related to the widget including technical values not expected to be needed in most cases.\n * Intended mostly for internal use, API might change. Consider using getValues or getEditorValues instead.\n */\nexport function getWidgetData<Values extends ValuesCommon>(): EditorData<Values> {\n  return getWidgetDataPure(new URLSearchParams(self.location.search));\n}\n\nexport function getEditorValuesPure<Values extends ValuesCommon>(\n  urlSearchParams: URLSearchParams\n): Partial<Values> {\n  return getWidgetDataPure<Values>(urlSearchParams).values;\n}\n\n/**\n * Function to get values you've set in the admin editor window.\n */\nexport function getEditorValues<Values extends ValuesCommon>(): Partial<Values> {\n  return getEditorValuesPure<Values>(new URLSearchParams(self.location.search));\n}\n\nexport function getValuesPure<Values extends ValuesCommon>(\n  valuesDefault: Values,\n  urlSearchParams: URLSearchParams\n): Values {\n  const values = { ...valuesDefault }; // set Obj to contain all possible values and prefill default value\n  const urlValues = parseWidgetData<Values>(urlSearchParams).values;\n\n  Object.keys(values).forEach((key: keyof Values) => {\n    const value = urlValues[key];\n    if (value != null && value !== \"\") values[key] = value as Values[typeof key]; // if value is specified in the URL, replace the default value\n  });\n  return values;\n}\n\n/**\n * Function to get values you've set in the admin editor window. Undefined/empty values are replaced with default values.\n *\n * @param valuesDefault - object with your default values to use, just import valuesDefault object from values.ts folder\n */\nexport function getValues<Values extends ValuesCommon>(valuesDefault: Values): Values {\n  return getValuesPure(valuesDefault, new URLSearchParams(self.location.search));\n}\n\n/**\n * Type of the onChange function.\n */\nexport type OnChange<Values extends ValuesCommon> = (values: Partial<Values>) => void;\n\n/**\n * The onChange function itself with 'origin' provided as a param.\n *\n * @param origin - web content's origin (URL) of your Dev Portal to send changes to\n * @param instanceId - ID of this particular instance of the widget\n * @param values - values that changed\n */\nexport function onChangeWithOrigin<Values extends ValuesCommon>(\n  origin: string,\n  instanceId: string,\n  values: Values\n): void {\n  Object.entries(values).forEach(([key, value]) => {\n    self.parent.postMessage({ [APIM_ON_CHANGE_MESSAGE_KEY]: { key, value, instanceId } }, origin);\n  });\n}\n\n/**\n * Build onChange function, which you can use, to send changed data from the editor.\n */\nexport function buildOnChange<Values extends ValuesCommon>(): OnChange<Values> {\n  const { instanceId } = getWidgetData();\n  return (values: Partial<Values>) => onChangeWithOrigin(\"*\", instanceId, values);\n}\n\n/**\n * Possible target modules\n * \"app\" for main application which is embedded in your Dev Portal\n * \"editor\" for form in admin panel\n */\nexport type TargetModule = \"app\" | \"editor\";\n/**\n * Secrets needed for communication with Dev Portal back-end\n */\nexport type Secrets = {\n  managementApiUrl: string;\n  apiVersion: string;\n  userId?: string;\n  token?: string;\n};\n\n/**\n * Request secrets - token & userId, from the Dev portal parent window.\n *\n * @param targetModule - is the function invoke from the main \"app\" window or the admin \"editor\"?\n */\nexport async function askForSecrets(targetModule: TargetModule): Promise<Secrets> {\n  let receiveSecrets: (e: MessageEvent) => void;\n\n  const promise = new Promise<Secrets>((resolve, reject) => {\n    const { instanceId, environment }: PortalData = getWidgetData();\n\n    receiveSecrets = ({ data }) => {\n      if (!(APIM_ASK_FOR_SECRETS_MESSAGE_KEY in data)) return;\n\n      const secrets = data[APIM_ASK_FOR_SECRETS_MESSAGE_KEY];\n      if (typeof secrets !== \"object\" || !(\"managementApiUrl\" in secrets)) {\n        reject(\"Secrets send by Dev Portal are invalid\");\n      }\n\n      resolve(secrets);\n    };\n\n    self.addEventListener(\"message\", receiveSecrets);\n\n    const message = {\n      [APIM_ASK_FOR_SECRETS_MESSAGE_KEY]: {\n        instanceId,\n        origin: self.location.origin,\n        targetModule,\n      },\n    };\n\n    if (targetModule === \"app\" && environment === \"development\") {\n      self.parent.parent.postMessage(message, \"*\");\n    } else {\n      self.parent.postMessage(message, \"*\");\n    }\n  });\n\n  return promise.finally(() => self.removeEventListener(\"message\", receiveSecrets));\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/** root of the blob storage folder */\nexport const BLOB_ROOT = \"custom-widgets\";\n/** name of the blob storage folder with widget implementation */\nexport const BLOB_DATA_FOLDER = \"data\";\n/** name of the blob storage folder with widget configs */\nexport const BLOB_CONFIGS_FOLDER = \"configs\";\n/** name of the configuration file */\nexport const APIM_CONFIG_FILE_NAME = \"config.msapim.json\";\n\n/**\n * Generate relative path for widgets' data on the blob storage\n *\n * @param name - name of the widget\n */\nexport function buildBlobDataPath(name: string): string {\n  return `${BLOB_ROOT}/${BLOB_DATA_FOLDER}/${name}/`;\n}\n\n/**\n * Generate relative path for widgets' config on the blob storage\n *\n * @param name - name of the widget\n */\nexport function buildBlobConfigPath(name: string): string {\n  return `${BLOB_ROOT}/${BLOB_CONFIGS_FOLDER}/${name}/${APIM_CONFIG_FILE_NAME}`;\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nasync function deploy(\n  _serviceInformation: unknown,\n  _name: string,\n  _fallbackConfigPath: string\n): Promise<void> {\n  throw new Error(\"Only for Node.js\");\n}\n\nexport default deploy;\n"],
  "mappings": ";AAMO,IAAM,uBAAuB;AAI7B,IAAM,6BAA6B;AAInC,IAAM,mCAAmC;AA2BhD,SAAS,gBACP,iBAAgC;;AAEhC,MAAI;AACF,UAAM,kBAAsC,KAAK,MAC/C,oBAAmB,KAAA,gBAAgB,IAAI,oBAAoB,OAAC,QAAA,OAAA,SAAA,KAAI,EAAE,CAAC;AAQrE,WAAO;WACA,GAAP;AACA,YAAQ,MACN,kBAAkB;IAChB,KAAK,UACP,CAAC;AAEH,WAAO,EAAE,QAAQ,CAAA,GAAI,aAAa,SAAS,YAAY,QAAO;;AAElE;AAEM,SAAU,kBACd,iBAAgC;AAEhC,SAAO,gBAAwB,eAAe;AAChD;AAMM,SAAU,gBAAa;AAC3B,SAAO,kBAAkB,IAAI,gBAAgB,KAAK,SAAS,MAAM,CAAC;AACpE;AAEM,SAAU,oBACd,iBAAgC;AAEhC,SAAO,kBAA0B,eAAe,EAAE;AACpD;AAKM,SAAU,kBAAe;AAC7B,SAAO,oBAA4B,IAAI,gBAAgB,KAAK,SAAS,MAAM,CAAC;AAC9E;AAEM,SAAU,cACd,eACA,iBAAgC;AAEhC,QAAM,SAAM,OAAA,OAAA,CAAA,GAAQ,aAAa;AACjC,QAAM,YAAY,gBAAwB,eAAe,EAAE;AAE3D,SAAO,KAAK,MAAM,EAAE,QAAQ,CAAC,QAAqB;AAChD,UAAM,QAAQ,UAAU;AACxB,QAAI,SAAS,QAAQ,UAAU;AAAI,aAAO,OAAO;EACnD,CAAC;AACD,SAAO;AACT;AAOM,SAAU,UAAuC,eAAqB;AAC1E,SAAO,cAAc,eAAe,IAAI,gBAAgB,KAAK,SAAS,MAAM,CAAC;AAC/E;AAcM,SAAU,mBACd,QACA,YACA,QAAc;AAEd,SAAO,QAAQ,MAAM,EAAE,QAAQ,CAAC,CAAC,KAAK,KAAK,MAAK;AAC9C,SAAK,OAAO,YAAY,EAAE,CAAC,6BAA6B,EAAE,KAAK,OAAO,WAAU,EAAE,GAAI,MAAM;EAC9F,CAAC;AACH;AAKM,SAAU,gBAAa;AAC3B,QAAM,EAAE,WAAU,IAAK,cAAa;AACpC,SAAO,CAAC,WAA4B,mBAAmB,KAAK,YAAY,MAAM;AAChF;AAuBA,eAAsB,cAAc,cAA0B;AAC5D,MAAI;AAEJ,QAAM,UAAU,IAAI,QAAiB,CAAC,SAAS,WAAU;AACvD,UAAM,EAAE,YAAY,YAAW,IAAiB,cAAa;AAE7D,qBAAiB,CAAC,EAAE,KAAI,MAAM;AAC5B,UAAI,EAAE,oCAAoC;AAAO;AAEjD,YAAM,UAAU,KAAK;AACrB,UAAI,OAAO,YAAY,YAAY,EAAE,sBAAsB,UAAU;AACnE,eAAO,wCAAwC;;AAGjD,cAAQ,OAAO;IACjB;AAEA,SAAK,iBAAiB,WAAW,cAAc;AAE/C,UAAM,UAAU;MACd,CAAC,mCAAmC;QAClC;QACA,QAAQ,KAAK,SAAS;QACtB;;;AAIJ,QAAI,iBAAiB,SAAS,gBAAgB,eAAe;AAC3D,WAAK,OAAO,OAAO,YAAY,SAAS,GAAG;WACtC;AACL,WAAK,OAAO,YAAY,SAAS,GAAG;;EAExC,CAAC;AAED,SAAO,QAAQ,QAAQ,MAAM,KAAK,oBAAoB,WAAW,cAAc,CAAC;AAClF;;;ACrMO,IAAM,YAAY;AAElB,IAAM,mBAAmB;AAEzB,IAAM,sBAAsB;AAE5B,IAAM,wBAAwB;AAO/B,SAAU,kBAAkB,MAAY;AAC5C,SAAO,GAAG,aAAa,oBAAoB;AAC7C;AAOM,SAAU,oBAAoB,MAAY;AAC9C,SAAO,GAAG,aAAa,uBAAuB,QAAQ;AACxD;;;ACzBA,eAAe,OACb,qBACA,OACA,qBAA2B;AAE3B,QAAM,IAAI,MAAM,kBAAkB;AACpC;AAEA,IAAA,yBAAe;",
  "names": []
}
