import{g as u,v as d,_ as h,c as i,a as s,t as c,w as p,b as f,F as _,r as g,o as n,d as b,e as v}from"./_plugin-vue_export-helper.ae466bbb.js";const y={data(){return{label1:null,label2:null,placeholder:null,actionUrl:null,defaultEmail:null,items:[]}},inject:["secretsPromise","requestPromise"],async mounted(){const o=u(d);this.label1=o.label1,this.label2=o.label2,this.placeholder=o.placeholder,this.actionUrl=o.actionUrl;const[l,a]=await Promise.all([this.secretsPromise,this.requestPromise]);if(!l.userId){this.defaultEmail="";return}a(`/users/${l.userId}`).then(e=>{e.json(),console.log("e",e),console.log("e.json",e.json())}).then(({properties:e})=>this.defaultEmail=e.email).catch(e=>{console.error("Could not prefill the email address!",e),this.defaultEmail=""}),a("/apis").then(e=>{if(!e.ok)throw Error("Error fetching items");return e.json()}).then(e=>{this.items=e.value}).catch(e=>{console.log(e)})}};const P=["action"],k={class:"form-group"},x={for:"email",class:"form-label"},E={class:"form-group height-fill flex-columns-container"},w={for:"message",class:"form-label"},U=["placeholder"],j=s("label",{class:"form-label"},"API List",-1),q={class:"form-group height-fill flex-columns-container"},A=s("div",{class:"form-group"},[s("button",{type:"submit",class:"button button-primary"},"Submit")],-1),D={key:1,class:"loading"};function V(o,l,a,e,t,S){return t.defaultEmail!=null?(n(),i("form",{key:0,action:t.actionUrl,method:"post",target:"_blank",class:"flex-columns-container height-fill"},[s("div",k,[s("label",x,c(t.label1),1),p(s("input",{id:"email",type:"email",class:"form-control",name:"email",placeholder:"example@contoso.com","onUpdate:modelValue":l[0]||(l[0]=r=>t.defaultEmail=r)},null,512),[[f,t.defaultEmail]])]),s("div",E,[s("label",w,c(t.label2),1),s("textarea",{id:"message",class:"form-control flex-grow",name:"message",placeholder:t.placeholder},null,8,U)]),j,s("div",q,[s("ul",null,[(n(!0),i(_,null,g(t.items,r=>(n(),i("li",{key:r.id},c(r.name),1))),128))])]),A],8,P)):(n(),i("div",D))}const B=h(y,[["render",V]]),m=b("app"),F=new Promise(async o=>{const l=await m;o(a=>fetch(`${l.managementApiUrl}${a}?api-version=${l.apiVersion}`,l.token?{headers:{Authorization:l.token}}:void 0))}),I=v(B).provide("secretsPromise",m).provide("requestPromise",F);I.mount("#root");
