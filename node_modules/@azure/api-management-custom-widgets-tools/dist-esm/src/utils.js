// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * Key for a search param, from which editor data will be loaded from.
 */
export const APIM_EDITOR_DATA_KEY = "editorData";
/**
 * Key for a post message object, it's used to propagate changes from editor to the DevPortal. Used to prevent interference with other applications.
 */
export const APIM_ON_CHANGE_MESSAGE_KEY = "customInputValueChangedMSAPIM";
/**
 * Key for a post message object, it's used to request and send secrets - token and user id, from the DevPortal. Used to prevent interference with other applications.
 */
export const APIM_ASK_FOR_SECRETS_MESSAGE_KEY = "askForSecretsMSAPIM";
function parseWidgetData(urlSearchParams) {
    var _a;
    try {
        const urlEditorParams = JSON.parse(decodeURIComponent((_a = urlSearchParams.get(APIM_EDITOR_DATA_KEY)) !== null && _a !== void 0 ? _a : ""));
        // if (!("origin" in urlEditorParams)) {
        //   console.error(
        //     "Could not get 'origin' from the search params of the URL:\n" + self.location.href
        //   );
        // }
        return urlEditorParams;
    }
    catch (e) {
        console.error(`Could not get '${APIM_EDITOR_DATA_KEY}' from the search params of the URL:\n` +
            self.location, e);
        return { values: {}, environment: "error", instanceId: "error" };
    }
}
export function getWidgetDataPure(urlSearchParams) {
    return parseWidgetData(urlSearchParams);
}
/**
 * Function to get all data related to the widget including technical values not expected to be needed in most cases.
 * Intended mostly for internal use, API might change. Consider using getValues or getEditorValues instead.
 */
export function getWidgetData() {
    return getWidgetDataPure(new URLSearchParams(self.location.search));
}
export function getEditorValuesPure(urlSearchParams) {
    return getWidgetDataPure(urlSearchParams).values;
}
/**
 * Function to get values you've set in the admin editor window.
 */
export function getEditorValues() {
    return getEditorValuesPure(new URLSearchParams(self.location.search));
}
export function getValuesPure(valuesDefault, urlSearchParams) {
    const values = Object.assign({}, valuesDefault); // set Obj to contain all possible values and prefill default value
    const urlValues = parseWidgetData(urlSearchParams).values;
    Object.keys(values).forEach((key) => {
        const value = urlValues[key];
        if (value != null && value !== "")
            values[key] = value; // if value is specified in the URL, replace the default value
    });
    return values;
}
/**
 * Function to get values you've set in the admin editor window. Undefined/empty values are replaced with default values.
 *
 * @param valuesDefault - object with your default values to use, just import valuesDefault object from values.ts folder
 */
export function getValues(valuesDefault) {
    return getValuesPure(valuesDefault, new URLSearchParams(self.location.search));
}
/**
 * The onChange function itself with 'origin' provided as a param.
 *
 * @param origin - web content's origin (URL) of your Dev Portal to send changes to
 * @param instanceId - ID of this particular instance of the widget
 * @param values - values that changed
 */
export function onChangeWithOrigin(origin, instanceId, values) {
    Object.entries(values).forEach(([key, value]) => {
        self.parent.postMessage({ [APIM_ON_CHANGE_MESSAGE_KEY]: { key, value, instanceId } }, origin);
    });
}
/**
 * Build onChange function, which you can use, to send changed data from the editor.
 */
export function buildOnChange() {
    const { instanceId } = getWidgetData();
    return (values) => onChangeWithOrigin("*", instanceId, values);
}
/**
 * Request secrets - token & userId, from the Dev portal parent window.
 *
 * @param targetModule - is the function invoke from the main "app" window or the admin "editor"?
 */
export async function askForSecrets(targetModule) {
    let receiveSecrets;
    const promise = new Promise((resolve, reject) => {
        const { instanceId, environment } = getWidgetData();
        receiveSecrets = ({ data }) => {
            if (!(APIM_ASK_FOR_SECRETS_MESSAGE_KEY in data))
                return;
            const secrets = data[APIM_ASK_FOR_SECRETS_MESSAGE_KEY];
            if (typeof secrets !== "object" || !("managementApiUrl" in secrets)) {
                reject("Secrets send by Dev Portal are invalid");
            }
            resolve(secrets);
        };
        self.addEventListener("message", receiveSecrets);
        const message = {
            [APIM_ASK_FOR_SECRETS_MESSAGE_KEY]: {
                instanceId,
                origin: self.location.origin,
                targetModule,
            },
        };
        if (targetModule === "app" && environment === "development") {
            self.parent.parent.postMessage(message, "*");
        }
        else {
            self.parent.postMessage(message, "*");
        }
    });
    return promise.finally(() => self.removeEventListener("message", receiveSecrets));
}
//# sourceMappingURL=utils.js.map